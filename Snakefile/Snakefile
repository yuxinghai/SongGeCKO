configfile: "config.yaml"

rule all:
    input:
        expand("{fastqc_dir}A1_combined_sec_R1.html",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R2.html",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R1.zip",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R2.zip",fastqc_dir=config["fastqc_dir"]),
        expand("{mageck_merge_dir}{screen_type}_sec.csv",mageck_merge_dir=config["mageck_merge_dir"],screen_type=config["screen_type"]),
        expand("{mageck_merge_dir}A.sgrna_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        expand("{mageck_merge_dir}B.sgrna_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        expand("{mageck_merge_dir}A.gene_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        expand("{mageck_merge_dir}B.gene_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        expand("{post_mageck_analysis_dir}{screen_type}_sec.csv",post_mageck_analysis_dir=config["post_mageck_analysis_dir"],screen_type=config["screen_type"]),
        expand("{mageck_dir}rank_result.txt",mageck_dir=config["mageck_dir"])





rule fastqc:
    input:
        R1=expand("{raw_dir}A1_combined_R1.fastq.gz",raw_dir=config["raw_dir"]),
        R2=expand("{raw_dir}A1_combined_R2.fastq.gz",raw_dir=config["raw_dir"])

    output:
        expand("{fastqc_dir}A1_combined_sec_R1.html",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R2.html",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R1.zip",fastqc_dir=config["fastqc_dir"]),
        expand("{fastqc_dir}A1_combined_sec_R2.zip",fastqc_dir=config["fastqc_dir"])

    log:
        expand("{log_dir}A1_combined_fastqc_sec.log",log_dir=config["log_dir"])
    shell:
        '''fastqc -f fastq --noextract -o {config[fastqc_dir]} {input.R1} >{log}
         fastqc -f fastq --noextract -o {config[fastqc_dir]} {input.R2} >>{log}'''


rule gunzip:
    input:
        R1=expand("{raw_dir}A1_combined_R1.fastq.gz",raw_dir=config["raw_dir"]),
        R2=expand("{raw_dir}A1_combined_R2.fastq.gz",raw_dir=config["raw_dir"])

    output:
        R1=expand("{decode_dir}A1_combined_1_sec.fastq",decode_dir=config["decode_dir"]),
        R2=expand("{decode_dir}A1_combined_2_sec.fastq",decode_dir=config["decode_dir"])

    shell:
        '''gunzip -c {input.R1} > {output.R1}
         gunzip -c {input.R2} > {output.R2}
        '''


rule merge_fastq:
    input:
        R1=expand("{decode_dir}A1_combined_1_sec.fastq",decode_dir=config["decode_dir"]),
        R2=expand("{decode_dir}A1_combined_2_sec.fastq",decode_dir=config["decode_dir"])

    output:
        expand("{decode_dir}A1_combined_merge_sec.fastq",decode_dir=config["decode_dir"])
    log:
        expand("{log_dir}A1_combined.fastqmerge_sec.log",log_dir=config["log_dir"])

    shell:
        "python {config[script_dir]}/readfq.py {input.R1} {input.R2} {output} >{log}"



rule exact_barcode:
    input:
        rules.merge_fastq.output
    output:
        expand("{decode_dir}A1_rowmerge_sec.fastq",decode_dir=config["decode_dir"])

    shell:
        "cat {input}| paste -d '\!' - - - - |grep 'TCTTGTGGAAAGGACGAAACACCG' >{output}"

rule row_separate:
    input:
        rules.exact_barcode.output
    output:
        expand("{decode_dir}A1_rowseprate_sec.fastq",decode_dir=config["decode_dir"])

    shell:
        "sed -r 's/\!/\n/g' {input} >{output}"



rule sample_divide:
    input:
        rules.row_separate.output

    output:
        A1=expand("{decode_dir}A1-F_sec.fq",decode_dir=config["decode_dir"]),
        A2=expand("{decode_dir}A2-F_sec.fq",decode_dir=config["decode_dir"]),
        NC_A1=expand("{decode_dir}NC-A1-F1_sec.fq",decode_dir=config["decode_dir"]),
        NC_A2=expand("{decode_dir}NC-A2-F2_sec.fq",decode_dir=config["decode_dir"]),
        B1=expand("{decode_dir}B1-F_sec.fq",decode_dir=config["decode_dir"]),
        B2=expand("{decode_dir}B2-F_sec.fq",decode_dir=config["decode_dir"]),
        NC_B1=expand("{decode_dir}NC-B1-F1_sec.fq",decode_dir=config["decode_dir"]),
        NC_B2=expand("{decode_dir}NC-B2-F2_sec.fq",decode_dir=config["decode_dir"])
        

    script:
        expand("{script_dir}/sample_divide.sh",script_dir=config["script_dir"])


rule exact_20nt_sgRNA:
    input:
        rules.sample_divide.output

    output:
        expand("{sgRNA_dir}{sample_type}.fq",sgRNA_dir=config["sgRNA_dir"],sample_type=config["sample_type"])

    script:
        expand("{script_dir}/03_exact_20nt_sgRNA.sh",script_dir=config["script_dir"])



rule map:
    input:
        rules.exact_20nt_sgRNA.output

    output:
        expand("{map_dir}{sample_type}_sec.sam",map_dir=config["map_dir"],sample_type=config["sample_type"])

    script:
        expand("{script_dir}/04_map.sh",script_dir=config["script_dir"])



rule count:
    input:
        rules.map.output

    output:
        expand("{count_dir}{screen_type}_sec.csv",count_dir=config["count_dir"],screen_type=config["screen_type"])

    script:
        expand("{script_dir}/05_count.sh",script_dir=config["script_dir"])



rule prefilter_mageck:
    input:
        rules.count.output

    output:
        expand("{mageck_dir}{screen_type}_sec.fq",mageck_dir=config["mageck_dir"],screen_type=config["screen_type"])

    script:
        expand("{script_dir}/pre_merge_mageck.sh",script_dir=config["script_dir"])



rule mageck:
    input:
        rules.prefilter_mageck.output

    output:
        expand("{mageck_dir}{screen_type}_sec.csv",mageck_dir=config["mageck_dir"],screen_type=config["screen_type"]),
        A1_sg=expand("{mageck_dir}A1.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        A2_sg=expand("{mageck_dir}A2.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        B1_sg=expand("{mageck_dir}B1.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        B2_sg=expand("{mageck_dir}B2.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        A1_ge=expand("{mageck_dir}A1.gene_summary.txt",mageck_dir=config["mageck_dir"]),
        A2_ge=expand("{mageck_dir}A2.gene_summary.txt",mageck_dir=config["mageck_dir"]),
        B1_ge=expand("{mageck_dir}B1.gene_summary.txt",mageck_dir=config["mageck_dir"]),
        B2_ge=expand("{mageck_dir}B2.gene_summary.txt",mageck_dir=config["mageck_dir"])

    script:
        expand("{script_dir}/06_mageck.sh",script_dir=config["script_dir"])



rule mageck_merge:
    input:
        rules.prefilter_mageck.output

    output:
        expand("{mageck_merge_dir}{screen_type}_sec.csv",mageck_merge_dir=config["mageck_merge_dir"],screen_type=config["screen_type"]),
        A_sg=expand("{mageck_merge_dir}A.sgrna_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        B_sg=expand("{mageck_merge_dir}B.sgrna_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        A_ge=expand("{mageck_merge_dir}A.gene_summary.txt",mageck_merge_dir=config["mageck_merge_dir"]),
        B_ge=expand("{mageck_merge_dir}B.gene_summary.txt",mageck_merge_dir=config["mageck_merge_dir"])
        

    script:
        expand("{script_dir}/07_mageck_merge.sh",script_dir=config["script_dir"])



rule mageck_result_analysis:
    input:
        A1=expand("{mageck_dir}A1.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        A2=expand("{mageck_dir}A2.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        B1=expand("{mageck_dir}B1.sgrna_summary.txt",mageck_dir=config["mageck_dir"]),
        B2=expand("{mageck_dir}B2.sgrna_summary.txt",mageck_dir=config["mageck_dir"])

    output:
        expand("{mageck_dir}mageck_result.txt",mageck_dir=config["mageck_dir"])

    shell:
        "python {config[script_dir]}/mageck_result_analysis.py {input.A1} {input.A2} {input.B1} {input.B2}  {output}"


rule mageck_rank:
    input:
        rules.mageck_result_analysis.output

    output:
        expand("{mageck_dir}rank_result.txt",mageck_dir=config["mageck_dir"])

    shell:
        "python {config[script_dir]}/rank_mageckresult.py {input} {output}"


rule mageck_quality:
    input:
        expand("{mageck_dir}{screen_type}_sec.csv",mageck_dir=config["mageck_dir"],screen_type=config["screen_type"])

    output:
        expand("{post_mageck_analysis_dir}{screen_type}_sec.csv",post_mageck_analysis_dir=config["post_mageck_analysis_dir"],screen_type=config["screen_type"])

    script:
        expand("{script_dir}/crispr_screen.R",script_dir=config["script_dir"])































